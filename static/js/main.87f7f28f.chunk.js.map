{"version":3,"sources":["assets/loader.svg","components/image/image.component.jsx","components/loader/loader.component.jsx","components/image-container/image-container.component.jsx","components/scroll-to-top-button/scroll-to-top-button.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Image","item","src","alt","title","href","target","rel","Loader","className","loader","ImageContainer","useState","listItems","setListItems","isFetching","setIsFetching","firstFetch","setFirstFetch","useEffect","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","console","log","addEventListener","removeEventListener","apiUrl","fetch","then","res","json","addedImage","map","id","urls","regular","alt_description","prevState","concat","catch","err","fetchMoreListItems","index","key","ScrollToTopButton","showScroll","setShowScroll","pageYOffset","onClick","scrollTo","top","behavior","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,oC,+OCG9BC,G,YAAQ,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACdC,EAAoBD,EAApBC,IAAKC,EAAeF,EAAfE,IAAKC,EAAUH,EAAVG,MAClB,OACE,uBAAGC,KAAMH,EAAKI,OAAO,SAASC,IAAI,uBAChC,yBAAKL,IAAKA,EAAKC,IAAKA,EAAKC,MAAOA,O,wBCHzBI,EAAS,WACpB,OACE,yBAAKC,UAAU,UACb,yBAAKP,IAAKQ,IAAQP,IAAI,cCFfQ,EAAiB,WAAO,IAAD,EACAC,mBAAS,IADT,mBAC3BC,EAD2B,KAChBC,EADgB,OAEEF,oBAAS,GAFX,mBAE3BG,EAF2B,KAEfC,EAFe,OAGEJ,oBAAS,GAHX,mBAG3BK,EAH2B,KAGfC,EAHe,KA6ClC,OAxCAC,qBAAU,WACR,IAAMC,EAAe,WACfC,OAAOC,YAAcC,SAASC,gBAAgBC,YAAcF,SAASC,gBAAgBE,cAAgBX,IACzGC,GAAc,GACdW,QAAQC,IAAI,UAId,OADAP,OAAOQ,iBAAiB,SAAUT,GAC3B,kBAAMC,OAAOS,oBAAoB,SAAUV,MACjD,CAACL,IAEJI,qBAAU,WACHJ,GAMP,WACE,IAEMgB,EAAM,4DADG,8CACH,kBAFE,IAGdC,MAAMD,GACHE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJ,IAAME,EAAaF,EAAIG,KAAI,SAAApC,GACzB,MAAO,CACLqC,GAAIrC,EAAKqC,GACTpC,IAAKD,EAAKsC,KAAKC,QACfrC,IAAKF,EAAKwC,gBACVrC,MAAOH,EAAKwC,oBAGhB3B,GAAa,SAAA4B,GAAS,OAAKA,EAAUC,OAAOP,MAC5CpB,GAAc,GACdE,GAAc,MAEf0B,OAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,MAxB5BC,KACC,CAAC/B,EAAYE,IA2BdA,EAAc,kBAAC,EAAD,MACZ,yBAAKR,UAAU,mBACZI,EAAUwB,KAAI,SAACpC,EAAM8C,GAAP,OACb,kBAAC,EAAD,CAAOC,IAAKD,EAAO9C,KAAMA,S,OClDtBgD,G,MAAoB,WAAO,IAAD,EAEDrC,oBAAS,GAFR,mBAE9BsC,EAF8B,KAElBC,EAFkB,KAkBrC,OAFA9B,OAAOQ,iBAAiB,UARD,YAChBqB,GAAc7B,OAAO+B,YAAc,IACtCD,GAAc,GACLD,GAAc7B,OAAO+B,aAAe,KAC7CD,GAAc,MAOhBD,EACA,kBAAC,IAAD,CAAiBzC,UAAU,YAAY4C,QAhBvB,WAChBhC,OAAOiC,SAAS,CAACC,IAAK,EAAGC,SAAU,cAgB/B,OCVOC,EAVH,WACV,OACE,6BACE,8DACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAAS0C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.87f7f28f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.41c85791.svg\";","import React from 'react';\nimport './image.styles.css';\n\nexport const Image = ({ item }) => {\n  const { src, alt, title } = item;\n  return(\n    <a href={src} target=\"_blank\" rel=\"noopener noreferrer\">\n      <img src={src} alt={alt} title={title}/>\n    </a>\n  )\n}","import React from 'react';\nimport './loader.styles.css';\nimport loader from '../../assets/loader.svg';\n\nexport const Loader = () => {\n  return(\n    <div className=\"loader\">\n      <img src={loader} alt=\"Loading\" />\n    </div>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport './image-container.styles.css';\nimport { Image } from '../image/image.component';\nimport { Loader } from '../loader/loader.component';\n\nexport const ImageContainer = () => {\n  const [listItems, setListItems] = useState([]);\n  const [isFetching, setIsFetching] = useState(true);\n  const [firstFetch, setFirstFetch] = useState(true);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isFetching) return;\n      setIsFetching(true);\n      console.log('fire')\n    }\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [isFetching]);\n\n  useEffect(() => {\n    if (!isFetching) return;\n    fetchMoreListItems();\n  }, [isFetching, firstFetch]);\n\n\n\n  function fetchMoreListItems() {\n    const count = 10;\n    const apiKey = 'aH6p-5TWQve12HUUx9QgSMCkq9Vh-Ht5xG532WFykuM';\n    const apiUrl = `https://api.unsplash.com/photos/random/?client_id=${apiKey}&count=${count}`;\n    fetch(apiUrl)\n      .then(res => res.json())\n      .then(res => {\n        const addedImage = res.map(item => {\n          return {\n            id: item.id,\n            src: item.urls.regular,\n            alt: item.alt_description,\n            title: item.alt_description,\n          }\n        })\n        setListItems(prevState => (prevState.concat(addedImage)))\n        setIsFetching(false);\n        setFirstFetch(false);\n      })\n      .catch(err => console.log(err));\n  }\n\n  return(\n    firstFetch ? (<Loader/>) : (\n      <div className=\"image-container\">\n        {listItems.map((item, index) => (\n          <Image key={index} item={item}/>\n        ))}\n      </div>\n    )\n  )\n}","import React, { useState } from 'react';\nimport {FaArrowCircleUp} from 'react-icons/fa';\nimport './scroll-to-top-button.styles.css';\n\nexport const ScrollToTopButton = () => {\n\n  const [showScroll, setShowScroll] = useState(false);\n\n  const backToTop = () => {\n    window.scrollTo({top: 0, behavior: 'smooth'});\n  }\n\n  const checkScrollTop = () => {\n    if (!showScroll && window.pageYOffset > 400){\n      setShowScroll(true)\n    } else if (showScroll && window.pageYOffset <= 400){\n      setShowScroll(false)\n    }\n  };\n\n  window.addEventListener('scroll', checkScrollTop)\n\n  return(\n    showScroll ? (\n    <FaArrowCircleUp className=\"scrollTop\" onClick={backToTop} />\n    ) : null\n  )\n}","import React from 'react';\nimport './App.css';\nimport { ImageContainer } from './components/image-container/image-container.component';\nimport { ScrollToTopButton } from './components/scroll-to-top-button/scroll-to-top-button.component';\n\nconst App = () => {\n  return(\n    <div>\n      <h1>Unsplash API - Infinite Scroll</h1>\n      <ImageContainer/>\n      <ScrollToTopButton/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}